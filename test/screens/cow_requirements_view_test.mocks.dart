// Mocks generated by Mockito 5.4.4 from annotations
// in rationapp/test/screens/cow_requirements_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i3;
import 'package:flutter/src/foundation/assertions.dart' as _i11;
import 'package:flutter/src/foundation/diagnostics.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rationapp/feed_state.dart' as _i9;
import 'package:rationapp/models/cow_characteristics_model.dart' as _i6;
import 'package:rationapp/models/feed_formula_model.dart' as _i7;
import 'package:rationapp/services/persistence_manager.dart' as _i2;
import 'package:rationapp/utils/cow_requirements_calculator.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPrefsService_0 extends _i1.SmartFake
    implements _i2.SharedPrefsService {
  _FakeSharedPrefsService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [SharedPrefsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefsService extends _i1.Mock
    implements _i2.SharedPrefsService {
  MockSharedPrefsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> setCowCharacteristics(
          _i6.CowCharacteristics? cowCharacteristics) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCowCharacteristics,
          [cowCharacteristics],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> setFeedPricesAndAvailability(
          List<_i7.FeedIngredient>? feedIngredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFeedPricesAndAvailability,
          [feedIngredients],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [CowRequirementsCalculator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCowRequirementsCalculator extends _i1.Mock
    implements _i8.CowRequirementsCalculator {
  MockCowRequirementsCalculator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void calculateCowRequirements(
    _i3.BuildContext? context,
    _i3.TextEditingController? liveWeightController,
    _i3.TextEditingController? pregnancyController,
    _i3.TextEditingController? volumeController,
    _i3.TextEditingController? milkFatController,
    _i3.TextEditingController? milkProteinController,
    String? lactationStageId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #calculateCowRequirements,
          [
            context,
            liveWeightController,
            pregnancyController,
            volumeController,
            milkFatController,
            milkProteinController,
            lactationStageId,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FeedState].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedState extends _i1.Mock implements _i9.FeedState {
  MockFeedState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.FeedIngredient> get fodderItems => (super.noSuchMethod(
        Invocation.getter(#fodderItems),
        returnValue: <_i7.FeedIngredient>[],
      ) as List<_i7.FeedIngredient>);

  @override
  set fodderItems(List<_i7.FeedIngredient>? _fodderItems) => super.noSuchMethod(
        Invocation.setter(
          #fodderItems,
          _fodderItems,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.FeedIngredient> get concentrateItems => (super.noSuchMethod(
        Invocation.getter(#concentrateItems),
        returnValue: <_i7.FeedIngredient>[],
      ) as List<_i7.FeedIngredient>);

  @override
  set concentrateItems(List<_i7.FeedIngredient>? _concentrateItems) =>
      super.noSuchMethod(
        Invocation.setter(
          #concentrateItems,
          _concentrateItems,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.SharedPrefsService get sharedPrefsService => (super.noSuchMethod(
        Invocation.getter(#sharedPrefsService),
        returnValue: _FakeSharedPrefsService_0(
          this,
          Invocation.getter(#sharedPrefsService),
        ),
      ) as _i2.SharedPrefsService);

  @override
  set sharedPrefsService(_i2.SharedPrefsService? _sharedPrefsService) =>
      super.noSuchMethod(
        Invocation.setter(
          #sharedPrefsService,
          _sharedPrefsService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.FeedIngredient> get availableFodderItems => (super.noSuchMethod(
        Invocation.getter(#availableFodderItems),
        returnValue: <_i7.FeedIngredient>[],
      ) as List<_i7.FeedIngredient>);

  @override
  List<_i7.FeedIngredient> get availableConcentrateItems => (super.noSuchMethod(
        Invocation.getter(#availableConcentrateItems),
        returnValue: <_i7.FeedIngredient>[],
      ) as List<_i7.FeedIngredient>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void initializeWithContext(_i3.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #initializeWithContext,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateIngredient(_i7.FeedIngredient? updatedIngredient) =>
      super.noSuchMethod(
        Invocation.method(
          #updateIngredient,
          [updatedIngredient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void loadSavedPrices() => super.noSuchMethod(
        Invocation.method(
          #loadSavedPrices,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_1(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i3.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_2(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i3.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i11.DiagnosticsTreeStyle? style = _i11.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i11.DiagnosticsTreeStyle? style = _i11.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i3.DiagnosticsNode);
}
